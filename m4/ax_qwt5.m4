# ax_qwt5.m4: A m4 macros to detect and configure Qwt libraries
#
# Copyright Â© 2009 Frederic Chateau <frederic.chateau@cea.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# As a special exception to the GNU General Public License, if you
# distribute this file as part of a program that contains a
# configuration script generated by Autoconf, you may include it under
# the same distribution terms that you use for the rest of that program.
#


#
# SYNOPSIS
#	AX_QWT5()
#
# DESCRIPTION
#	Checks the existence of the Qwt library and headers. The AT_WITH_QT macro
#	must be called before.
#
# The macro defines the following substitution variables
#
#    QWT_CPPFLAGS
#    QWT_LDFLAGS
#    QWT_LIBS
#    QWT_VERSION_STR
#    QWT_VERSION_MAJOR
#    
#
AC_DEFUN([AX_QWT5],
[
	AC_ARG_WITH([qwt5],
		[AC_HELP_STRING([--with-qwt5], [user defined path to Qwt library])],
		[
			if test "$withval" = "no"
			then
				want_qwt="no"
			elif test "$withval" = "yes"
			then
				want_qwt="yes"
			else
				with_qwt="$withval"
				want_qwt="yes"	
			fi
		],
		[
			want_qwt="yes"
		]
	)
	if test "$want_qwt" = "yes"
	then
		have_qwt="no"
		# if the configure switch is used to define the QWT path
		if test -n "$with_qwt"
		then
			if test -f "${with_qwt}/include/qwt.h"
			then
				qwt_include_path="${with_qwt}/include"
				qwt_library_path="${with_qwt}/lib"
				have_qwt="yes"
			elif test -f "${with_qwt}/include/qwt/qwt.h"
			then
				qwt_include_path="${with_qwt}/include/qwt"
				qwt_library_path="${with_qwt}/lib"
				have_qwt="yes"
			fi
		else
			#otherwise, try to find QWT in some standard install directories
			for qwt_path_tmp in /usr /usr/local /opt/local
			do
				if test -f "${qwt_path_tmp}/include/qwt.h"
				then
					qwt_include_path="${qwt_path_tmp}/include"
					qwt_library_path="${qwt_path_tmp}/lib"
					have_qwt="yes"
					break;
				elif test -f "${qwt_path_tmp}/include/qwt-qt4/qwt.h"
				then
					qwt_include_path="${qwt_path_tmp}/include/qwt-qt4"
					qwt_library_path="${qwt_path_tmp}/lib"
					have_qwt="yes"
					break;
				elif test -f "${qwt_path_tmp}/include/qwt5-qt4/qwt.h"
				then
					qwt_include_path="${qwt_path_tmp}/include/qwt5-qt4"
					qwt_library_path="${qwt_path_tmp}/lib"
					have_qwt="yes"
					break;
				elif test -f "${qwt_path_tmp}/include/qwt/qwt.h"
				then
					qwt_include_path="${qwt_path_tmp}/include/qwt"
					qwt_library_path="${qwt_path_tmp}/lib"
					have_qwt="yes"
					break;
				fi
			done
		fi
		
		if test "$have_qwt" = "yes"
		then
			QWT_CPPFLAGS="-I${qwt_include_path}"
			QWT_LDFLAGS="-L${qwt_library_path}"

			CPPFLAGS_backup="$CPPFLAGS"
			LDFLAGS_backup="$LDFLAGS"
			LIBS_backup="$LIBS"

			# Sometimes, qmake add quotes around -I and -L paths. It makes
			# AC_LINK_IFELSE (called by ACX_PROG_SEARCH_LIB) fail.
			# This is a workaround to remove quotes. The drawback is that
			# directories with spaces will not work.
			QT_CPPFLAGS=`echo $QT_CPPFLAGS | tr -d \"`
			QT_LDFLAGS=`echo $QT_LDFLAGS | tr -d \"`
			QT_LIBS=`echo $QT_LIBS | tr -d \"`

			CPPFLAGS="$QWT_CPPFLAGS $QT_CPPFLAGS $CPPFLAGS"
			LDFLAGS="$QWT_LDFLAGS $QT_LDFLAGS $LDFLAGS"
			LIBS="$QT_LIBS $LIBS"
			
			# Protect against use of non-ISO type 'long long' by Qt on TBD hosts
			CXXFLAGS="$CXXFLAGS -Wno-long-long"

			AC_MSG_CHECKING([for Qwt library])
			
			# The name of the QWT library may vary from one system to another.
			# This macro will find which is one works.
			ACX_PROG_SEARCH_LIB(
			[
				AC_LANG_SOURCE(
				[[
					@%:@include <qwt_plot.h>
					@%:@include <QApplication>
					int main(int argc, char** argv)
					{
						QApplication a(argc, argv);
						QwtPlot plot;			
						plot.resize(600,400);
	    				plot.show();
	    				return a.exec();
	    			}
				]])
			],
			[qwt5-qt4 qwt-qt4 qwt5 qwt],
			[
				have_qwt="yes"
				qwt_lib="$found_lib"
				AC_MSG_RESULT([yes])
			],
			[
				have_qwt="no"
				AC_MSG_RESULT([not found])
			])
			
			# Check library version
			AC_CHECK_FILE([${qwt_include_path}/qwt_global.h],
				[
				AC_PROG_GREP
				AC_PROG_AWK
				AC_MSG_CHECKING([for version of Qwt])
				qwt_version_str=`$GREP QWT_VERSION_STR ${qwt_include_path}/qwt_global.h | $AWK 'BEGIN { FS = "\""; } { printf $''2; }'`
				AC_MSG_RESULT([$qwt_version_str])
				AC_SUBST([QWT_VERSION_STR], [$qwt_version_str])
				qwt_version_major=`echo $qwt_version_str | $AWK 'BEGIN { FS = "."; } { printf $''1; }'`
				AC_SUBST([QWT_VERSION_MAJOR], [$qwt_version_major])
				],
				[AC_MSG_WARN([Could not find version of Qwt library])])
				
			CPPFLAGS="$CPPFLAGS_backup"
			LDFLAGS="$LDFLAGS_backup"
			LIBS="$LIBS_backup"
		fi
		
		if test "$have_qwt" = "yes"
		then
			QWT_LIBS="-l$qwt_lib"
			AC_SUBST(QWT_CPPFLAGS)
			AC_SUBST(QWT_LDFLAGS)
			AC_SUBST(QWT_LIBS)
			AC_DEFINE(HAVE_QWT, 1, [Define if you have Qwt library])
		fi

	else # !want_qwt
		have_qwt="no"
	fi
])
	
