# ax_lib_qwt.m4: A m4 macros to detect and configure Qwt libraries
#
# Copyright Â© 2009 Frederic Chateau <frederic.chateau@cea.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# As a special exception to the GNU General Public License, if you
# distribute this file as part of a program that contains a
# configuration script generated by Autoconf, you may include it under
# the same distribution terms that you use for the rest of that program.
#


#
# SYNOPSIS
#	AX_LIB_QWT()
#
# DESCRIPTION
#	Checks the existence of the Qwt library and headers. The AT_WITH_QT macro
#	must be called before.
#
# The macro defines the following substitution variables
#
#    QWT_CPPFLAGS
#    QWT_LDFLAGS
#    QWT_LIBS
#    QWT_VERSION_STR
#    QWT_VERSION_MAJOR
#    
#serial 2
#
AC_DEFUN([AX_LIB_QWT],
[
dnl Ensure we checked for Qt
	AC_REQUIRE([AT_WITH_QT])

dnl Let users provide the location
	AC_ARG_WITH([qwt5],
		[AC_HELP_STRING([--with-qwt5], [user defined path to Qwt library])],
		[
			if test "$withval" = "no"
			then
				want_qwt="no"
			elif test "$withval" = "yes"
			then
				want_qwt="yes"
			else
				with_qwt="$withval"
				want_qwt="yes"	
			fi
		],
		[
			want_qwt="yes"
		]
	)

	have_qwt=no

	if test "$want_qwt" = "yes"
	then

dnl Save or initialize flags
		saved_CPPFLAGS="$CPPFLAGS"
		saved_LDFLAGS="$LDFLAGS"
		saved_LIBS="$LIBS"
		QWT_CPPFLAGS=""
		QWT_LDFLAGS=""
		QWT_LIBS=""

dnl -----------------------------------------------------------------------------------------------
dnl                                         Check for header
dnl -----------------------------------------------------------------------------------------------
dnl Protect against use of non-ISO type 'long long' by Qt on TBD hosts
		CXXFLAGS="$CXXFLAGS -Wno-long-long"

dnl Sometimes, qmake add quotes around -I and -L paths. It makes
dnl AC_LINK_IFELSE (called by ACX_PROG_SEARCH_LIB) fail.
dnl This is a workaround to remove quotes. The drawback is that
dnl directories with spaces will not work.
		QT_CPPFLAGS=`echo $QT_CPPFLAGS | tr -d \"`
		QT_LDFLAGS=`echo $QT_LDFLAGS | tr -d \"`
		QT_LIBS=`echo $QT_LIBS | tr -d \"`

dnl User did provide location
		if test -n "$with_qwt"
		then
dnl Check if user provided top directory of include directory
			for qwt_prefix in '' '/qwt'
			do
				qwt_include_dir=${with_qwt}/include${qwt_prefix}
    			AC_CHECK_FILE([${qwt_include_dir}/qwt.h],[
    				qwt_header_found=yes
    				QWT_LDFLAGS="-L${with_qwt}/lib"
    				break], [qwt_header_found=no])
			done
dnl Check if user provided framework directory
			if test "${qwt_header_found}" != "yes";
			then 
				for qwt_framework in 'qwt' 'qwt-qt4' 'qwt5-qt4'
				do
					qwt_include_dir=${with_qwt}/lib/${qwt_framework}.framework/Versions/Current/Headers
    				AC_CHECK_FILE([${qwt_include_dir}/qwt.h],[
    					qwt_header_found=yes
    					QWT_LDFLAGS="-Wl,-F${with_qwt}/lib"
    					break], [qwt_header_found=no])
				done
			fi
dnl Check for header usability
			if test "${qwt_header_found}" != "no";
			then
				CPPFLAGS="${saved_CPPFLAGS} ${QT_CPPFLAGS} -I${qwt_include_dir}"
				AC_CHECK_HEADER([qwt.h],[
					QWT_CPPFLAGS="-I${qwt_include_dir}"
					qwt_header_found=yes],[qwt_header_found=no])
			fi
dnl User did not provide location
		else
dnl Check for header in standard include directories
			for qwt_topdir in '/usr' '/usr/local' '/opt/local'
			do
				for qwt_prefix in '' '/qwt' '/qwt-qt4' '/qwt5-qt4'
				do
					qwt_include_dir=${qwt_topdir}/include${qwt_prefix}
    				AC_CHECK_FILE([${qwt_include_dir}/qwt.h],[
    					qwt_header_found=yes
    					QWT_LDFLAGS="-L${qwt_include_dir}/lib"
    					break], [qwt_header_found=no])
				done
				if test "${qwt_header_found}" != "no"; then break; fi
			done
dnl Check for header in framework
			for qwt_topdir in '/usr' '/usr/local' '/opt/local'
			do
				if test "${qwt_header_found}" != "no"; then break; fi
				for qwt_framework in 'qwt' 'qwt-qt4' 'qwt5-qt4'
				do
					qwt_include_dir=${qwt_topdir}/lib/${qwt_framework}.framework/Versions/Current/Headers
    				AC_CHECK_FILE([${qwt_include_dir}/qwt.h],[
    					qwt_header_found=yes
    					QWT_LDFLAGS="-Wl,-F${qwt_topdir}/lib"
    					break], [qwt_header_found=no])
				done
				if test "${qwt_header_found}" != "no"; then break; fi
			done
dnl Check for header usability
			if test "${qwt_header_found}" != "no";
			then
				CPPFLAGS="${saved_CPPFLAGS} ${QT_CPPFLAGS} -I${qwt_include_dir}"
				AC_CHECK_HEADER([qwt.h],[
					QWT_CPPFLAGS="-I${qwt_include_dir}"
					qwt_header_found=yes],[qwt_header_found=no])
			fi
		fi
dnl -----------------------------------------------------------------------------------------------
dnl                                         Check for library
dnl -----------------------------------------------------------------------------------------------
		if test "${qwt_header_found}" != "no";
		then
			LDFLAGS="$saved_LDFLAGS $QT_LDFLAGS $QWT_LDFLAGS"
			LIBS="$saved_LIBS $QT_LIBS"
dnl Check for Qwt library
			AC_MSG_CHECKING([for Qwt library])
			ACX_PROG_SEARCH_LIB(
			[
				AC_LANG_SOURCE(
				[[
					@%:@include <qwt_plot.h>
					@%:@include <QApplication>
					int main(int argc, char** argv)
					{
						QApplication a(argc, argv);
						QwtPlot plot;			
						plot.resize(600,400);
	    				plot.show();
	    				return a.exec();
	    			}
				]])
			],
			[qwt5-qt4 qwt-qt4 qwt5 qwt],
			[
				qwt_lib_found="yes"
				QWT_LIBS="-l$found_lib"
			],
			[
				qwt_lib_found="no"
			])
			AC_MSG_RESULT([$qwt_lib_found])
dnl Check for Qwt framework
			if test "${qwt_lib_found}" != "yes";
			then
				AC_MSG_CHECKING([for Qwt framework])
				for qwt_framework in 'qwt' 'qwt-qt4' 'qwt5-qt4'
				do
					LIBS="$saved_LIBS $QT_LIBS -framework ${qwt_framework}"
					AC_LINK_IFELSE(
					[
						AC_LANG_SOURCE(
						[[
							@%:@include <qwt_plot.h>
							@%:@include <QApplication>
							int main(int argc, char** argv)
							{
								QApplication a(argc, argv);
								QwtPlot plot;			
								plot.resize(600,400);
	    					plot.show();
	    					return a.exec();
	    					}
						]])
					],
					[
						qwt_lib_found="yes"
						QWT_LIBS="-framework ${qwt_framework}"
						break
					], [qwt_lib_found=no])
				done
				AC_MSG_RESULT([$qwt_lib_found])
			fi
		fi


		if test "${qwt_header_found}" != "no" -a ${qwt_lib_found} != "no";
		then
dnl -----------------------------------------------------------------------------------------------
dnl                                         Check library version
dnl -----------------------------------------------------------------------------------------------
			AC_CHECK_FILE([${qwt_include_dir}/qwt_global.h],
				[
				AC_PROG_GREP
				AC_PROG_AWK
				AC_MSG_CHECKING([for version of Qwt])
				qwt_version_str=`$GREP QWT_VERSION_STR ${qwt_include_dir}/qwt_global.h | $AWK 'BEGIN { FS = "\""; } { printf $''2; }'`
				AC_MSG_RESULT([$qwt_version_str])
				AC_SUBST([QWT_VERSION_STR], [$qwt_version_str])
				qwt_version_major=`echo $qwt_version_str | $AWK 'BEGIN { FS = "."; } { printf $''1; }'`
				AC_SUBST([QWT_VERSION_MAJOR], [$qwt_version_major])
				],
				[AC_MSG_WARN([Could not find version of Qwt library])])
				
dnl Define Qwt flags
			have_qwt=yes
			AC_SUBST([QWT_CPPFLAGS])
			AC_SUBST([QWT_LDFLAGS])
			AC_SUBST([QWT_LIBS])
			AC_DEFINE([HAVE_QWT], [1], [Define if you have Qwt library])
		fi
		
dnl Restore initial flags
		CPPFLAGS="$saved_CPPFLAGS"
		LDFLAGS="$saved_LDFLAGS"
		LIBS="$saved_LIBS"
	fi
])