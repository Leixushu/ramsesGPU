# ax_lib_ice.m4: A set of m4 macros to detect and configure Ice and IceE libraries
#
# Copyright Â© 2008 Frederic Chateau <frederic.chateau@cea.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# As a special exception to the GNU General Public License, if you
# distribute this file as part of a program that contains a
# configuration script generated by Autoconf, you may include it under
# the same distribution terms that you use for the rest of that program.
#


#
# SYNOPSIS
#	AX_LIB_ICE([ENABLED_BY_DEFAULT])
#
# DESCRIPTION
#	Checks the existence of the Ice library and/or associated binary tools.
#
#	ENABLED_BY_DEFAULT="default-disabled"|"default-enabled"
#		Tells whether Ice should be enabled or not if configure is run without
#		options.
#
#	Options:
#	--with-ice=(path|yes|no)
#		Indicates whether to use Ice or not, and the path of a non-standard
#		installation location of Ice if necessary.
#	--with-ice-bin=path
#		Specify the directory where the Ice binary utilities (like slice2cpp)
#		are, in case they would not be in the directory designated by --with-ice 
#	
#		See also ACX_PTHREAD
#
# 	This macro calls:
#		see AX_LIB_ICE_IMPL
#
AC_DEFUN([AX_LIB_ICE],
[
	AC_REQUIRE([AX_SLICE2CPP_SILENT])
	AX_LIB_ICE_IMPL([Ice], [ice], [slice2cpp], [$1])
])

#
# SYNOPSIS
#	AX_LIB_ICEE([ENABLED_BY_DEFAULT])
#
# DESCRIPTION
#	Checks the existence of the IceE (embedded) library and/or associated binary
#	tools.
#
#	ENABLED_BY_DEFAULT="default-disabled"|"default-enabled"
#		Tells whether IceE should be enabled or not if configure is run without
#		options.
#
#	Options:
#	--with-icee=(path|yes|no)
#		Indicates whether to use IceE or not, and the path of a non-standard
#		installation location of IceE if necessary.
#	--with-icee-bin=path
#		Specify the directory where the Ice binary utilities (like slice2cppe)
#		are, in case they would not be in the directory designated by --with-icee
#	
#		See also ACX_PTHREAD
#
#	This macro calls:
#		see AX_LIB_ICE_IMPL
#
AC_DEFUN([AX_LIB_ICEE],
[
	AC_REQUIRE([AX_SLICE2CPP_SILENT])
	AX_LIB_ICE_IMPL([IceE], [icee], [slice2cppe], [$1])
])

AC_DEFUN([AX_SLICE2CPP_SILENT],
[
	m4_ifdef([AM_SILENT_RULES], [
		AC_SUBST([slice2cpp_verbose],  ['$(slice2cpp_verbose_$(V))'])
		AC_SUBST([slice2cpp_verbose_], ['$(slice2cpp_verbose_$(AM_DEFAULT_VERBOSITY))'])
	])
])

#
# SYNOPSIS
#	AX_LIB_ICE_IMPL(ICE_PACKAGE, ICE_TARNAME, SLICE2CPP_NAME, [ENABLED_BY_DEFAULT])
#
# DESCRIPTION
#	Checks the existence of the Ice or IceE library.
#
#   ICE_PACKAGE
#		The name of the Ice package (either Ice or IceE).
#	ICE_TARNAME
#		Same as ICE_PACKAGE but using tarball conventions (lower case).
#	SLICE2CPP_NAME
#		The name of the slice2cpp program (either slice2cpp or slice2cppe).
#	ENABLED_BY_DEFAULT
#		See AX_LIB_ICE / AX_LIB_ICEE
#
#	This macro calls:
#		AC_SUBST(ICE_CPPFLAGS)
#		AC_SUBST(ICE_LDFLAGS)
#		AC_SUBST(ICE_LIBS)
#		AC_SUBST(PTHREAD_CFLAGS)
#		AC_SUBST(PTHREAD_LIBS)
#		AC_SUBST(ICE_EDITION)
#
AC_DEFUN([AX_LIB_ICE_IMPL],
[
if test "$want_$2" = "yes" 
then
	AC_MSG_ERROR([The Ice macro should not be called more than once])
fi
AC_ARG_WITH($2,
	AS_HELP_STRING([--with-$2@<:@=yes|no|DIR@:>@],
	[
		specify whether to use the ZeroC $1 middleware and activates all
		related features, or not. It is also possible to specify the path of $1
		home. (default=yes).
	]),
[
	with_$2=$withval
	if test "$withval" = "no"
	then
		want_$2="no"
	elif test "$withval" = "yes"
	then
		want_$2="yes"
	else
		want_$2="yes"
		$2_home_path=$withval
	fi
	DISTCHECK_CONFIGURE_FLAGS="$DISTCHECK_CONFIGURE_FLAGS --with-$2=$withval"
],
[
	if test "$4" = "default-enabled" -o -z "$4"
	then
		want_$2="yes"
	elif test "$4" = "default-disabled"
	then
		want_$2="no"
	else
		AC_MSG_ERROR([bad value for ENABLED_BY_DEFAULT. see the macro documentation])
	fi
])

if test "$want_ice" = "yes" -a "$want_icee" = "yes"
then
	AC_MSG_ERROR([Ice and IceE cannot be both enabled])
fi

dnl On Mac OS X, search in /opt/local unless specified otherwise
if test -z "$$2_home_path"
then
	case $host_os in
		darwin*)
			$2_home_path=/opt/local
		;;
	esac
fi

if test -n "$$2_home_path"
then
	$2_header_path="$$2_home_path/include"
	$2_lib_path="$$2_home_path/lib"
	$2_bin_path="$$2_home_path/bin"

	ICE_CPPFLAGS="-I$$2_header_path"
	ICE_LDFLAGS="-L$$2_lib_path"
elif test "$want_$2" = "yes"
then
	$2_header_path=""
	$2_lib_path=""
	$2_bin_path=""

	ICE_CPPFLAGS=""
	ICE_LDFLAGS=""
fi

AC_ARG_WITH([$2-bin],
	AS_HELP_STRING([--with-$2-bin=DIR],
	[
		defines the directory where the $1 binary utilities (like $3)
		are (in case it would not be the bin/ directory of the $1 home).
		This switch can be used alone, with $1 disabled.
		It is mainly useful when compiling $1 or when using cross compiled $1
		libraries.
	]),
[
	$2_bin_path=$withval
	want_$2_bin="yes"
	DISTCHECK_CONFIGURE_FLAGS="$DISTCHECK_CONFIGURE_FLAGS --with-$2-bin=$withval"
],
[
	want_$2_bin="no"
])

if test "$want_$2" = "yes" -o "$want_$2_bin" = "yes"
then
	AC_PATH_PROG([SLICE2CPP], [$3], [], [$$2_bin_path$PATH_SEPARATOR$PATH])
	if test -n "$SLICE2CPP"
	then
		have_$3="yes"
	else
		have_$3="no"
		AC_ERROR([$3 is requested but not available])
	fi
fi

if test "$want_$2" = "yes"
then
	AC_REQUIRE([ACX_PTHREAD])

	ICE_LIBS=m4_case([$1],[Ice],["-lIce -lIceUtil"],[IceE], ["-lIceE"], [""])

	# Strip -pedantic flag from CXXFLAGS since Ice does not respect ISO C++ on 32 bits hosts
	AC_MSG_CHECKING([whether __WORDSIZE is 64])
	AC_COMPILE_IFELSE(
		[AC_LANG_PROGRAM([@%:@include<bits/wordsize.h>],
			[
				#if __WORDSIZE == 64
				#else
				# Cannot use Ice with -pedantic flag on 32 bits machine!
				#endif
			])],
		[AC_MSG_RESULT([yes])],
		[
			AC_MSG_RESULT([no])
			CXXFLAGS=`echo $CXXFLAGS | sed 's,-pedantic-errors,,' | sed 's,-pedantic,,'`
		])
	
	dnl The IceUtil/Config.h does not check limits.h unless HAVE_LIMITS_H is defined
	dnl However, the type used for Ice::Long should be the same as the one used to bulid the Ice library,
	dnl so there is no point in defining HAVE_LIMITS_H
	dnl AC_CHECK_HEADER([limits.h],[ICE_CPPFLAGS="$ICE_CPPFLAGS -DHAVE_LIMITS_H=1"], [])

	saved_CPPFLAGS=$CPPFLAGS
	saved_CXXFLAGS=$CXXFLAGS
	saved_LDFLAGS=$LDFLAGS
	saved_LIBS=$LIBS

	CPPFLAGS="$CPPFLAGS $ICE_CPPFLAGS"
	CXXFLAGS="$CXXFLAGS $PTHREAD_CFLAGS"
	LDFLAGS="$LDFLAGS $ICE_LDFLAGS"
	LIBS="$ICE_LIBS $PTHREAD_LIBS $LIBS"

	AC_MSG_CHECKING([for $1 headers])
	AC_COMPILE_IFELSE(
	[
		AC_LANG_PROGRAM([@%:@include <$1/$1.h>], [])
	],
	[
		have_$2_headers="yes"
		AC_MSG_RESULT([yes])
	],
	[
		have_$2_headers="no"
		AC_MSG_RESULT([not found])
	])

	AC_MSG_CHECKING([for $1 libraries])
	AC_LINK_IFELSE(
	[
		AC_LANG_PROGRAM(
		[@%:@include <$1/$1.h>
		@%:@include <$1/Communicator.h>],
		[
			Ice::CommunicatorPtr ic = Ice::initialize();
			Ice::ObjectAdapterPtr adapter = ic->createObjectAdapterWithEndpoints("SimplePrinterAdapter", "default -p 10000");
			ic->waitForShutdown();
		])
	],
	[
		have_$2_libs="yes"
		AC_MSG_RESULT([yes])
	],
	[
		have_$2_libs="no"
		AC_MSG_RESULT([not found])
	])
	
# The MacPorts port of Ice to MacOSX renames libIce.dylib into libZeroCIce.dylib to avoid conflicts with libICE.dylib
    AC_MSG_CHECKING([for $1 libraries from MacPorts])
	if test "$1" = "Ice" -a "$have_$2_libs" = "no" -a "$$2_lib_path" = "/opt/local/lib"
	then
	    ICE_LIBS="-lZeroCIce -lIceUtil"
	    LIBS="$ICE_LIBS $PTHREAD_LIBS $saved_LIBS"
		AC_LINK_IFELSE(
		[
			AC_LANG_PROGRAM(
			[@%:@include <$1/$1.h>
			@%:@include <$1/Communicator.h>],
			[
				Ice::CommunicatorPtr ic = Ice::initialize();
				Ice::ObjectAdapterPtr adapter = ic->createObjectAdapterWithEndpoints("SimplePrinterAdapter", "default -p 10000");
				ic->waitForShutdown();
			])
		],
		[
			have_$2_libs="yes"
			AC_MSG_RESULT([yes])
		],
		[
# Revision 110485 of MacPorts port zeroc-ice34 changed library names again...
			ICE_LIBS="-lZerocIce -lZerocIceUtil"
			LIBS="$ICE_LIBS $PTHREAD_LIBS $saved_LIBS"
# Port zeroc-ice35 uses @rpath in dylib install name instead of /opt/local/lib
			ICE_LDFLAGS="$ICE_LDFLAGS -Wl,-rpath,/opt/local/lib"
			LDFLAGS="$saved_LDFLAGS $ICE_LDFLAGS"
			AC_LINK_IFELSE(
			[
				AC_LANG_PROGRAM(
				[@%:@include <$1/$1.h>
				@%:@include <$1/Communicator.h>],
				[
					Ice::CommunicatorPtr ic = Ice::initialize();
					Ice::ObjectAdapterPtr adapter = ic->createObjectAdapterWithEndpoints("SimplePrinterAdapter", "default -p 10000");
					ic->waitForShutdown();
				])
			],
			[
				have_$2_libs="yes"
				AC_MSG_RESULT([yes])
			],
			[
				AC_MSG_RESULT([not found])
			])
		])
	else
		AC_MSG_RESULT([not found])
	fi

	CPPFLAGS=$saved_CPPFLAGS
	CXXFLAGS=$saved_CXXFLAGS
	LDFLAGS=$saved_LDFLAGS
	LIBS=$saved_LIBS

	if test "$have_$2_headers" = "yes" -a "$have_$2_libs" = "yes" -a "$have_$3" = "yes"
	then
		have_$2="yes"
		ICE_EDITION=$1
		AC_SUBST([ICE_CPPFLAGS])
		AC_SUBST([ICE_LDFLAGS])
		AC_SUBST([ICE_LIBS])
		AC_SUBST([ICE_EDITION])
	else
		have_$2="no"
		AC_MSG_ERROR([$1 is requested but not available])
	fi
fi

AC_SUBST([DISTCHECK_CONFIGURE_FLAGS])
])

#
# SYNOPSIS
#	AX_LIB_ICE([ENABLED_BY_DEFAULT])
#
# DESCRIPTION
#	Checks the existence of Ice or IceE library and associated binary tools.
#	Ice and IceE should not be enabled at the same time.
#
#	Options:
#	--with-ice=(path|yes|no)
#		Indicates whether to use Ice or not, and the path of a non-standard
#		installation location of Ice if necessary.
#	--with-ice-bin=path
#		Specify the directory where the Ice binary utilities (like slice2cpp)
#		are. This should only be needed when building Ice.
#	--with-icee=(path|yes|no)
#		Indicates whether to use IceE or not, and the path of a non-standard
#		installation location of IceE if necessary.
#	--with-icee-bin=path
#		Specify the directory where the IceE binary utilities (like slice2cppe)
#		are. This should only be needed when building IceE.
#
AC_DEFUN([AX_LIB_ICE_OR_ICEE],
[
	AX_LIB_ICE("default-disabled")
	AX_LIB_ICEE("default-disabled")

	if test "$have_icee" != "yes" -a "$have_ice" != "yes"
	then
		AX_LIB_ICE("default-enabled")
	fi
	
	if test "$have_ice" = "yes" -o "$have_icee" = "yes"
	then
		use_ice="yes"
		ICE_CPPFLAGS="-DICE_EDITION=$ICE_EDITION -DICE_HEADER\(header\)=\"<$ICE_EDITION/header>\" $ICE_CPPFLAGS"
	fi
	if test "$have_ice" = "yes"
	then
		ICE_CPPFLAGS="-DICEUTIL_HEADER\(header\)=\"<IceUtil/header>\" $ICE_CPPFLAGS"
	elif test "$have_icee" = "yes"
	then
		ICE_CPPFLAGS="-DICEUTIL_HEADER\(header\)=\"<IceE/header>\" $ICE_CPPFLAGS"
	fi
	AM_CONDITIONAL([ICEE], [ test "$have_icee" = "yes" -a "$use_ice" = "yes" ])
	AM_CONDITIONAL([ICE], [ test "$have_icee" = "no" -a "$use_ice" = "yes"])
	AM_CONDITIONAL([ICE_ANY], [ test "$use_ice" = "yes"])
])
